# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
# числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# © geekbrains.ru 20
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение
# количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом
# случае метод make_order() вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод
# make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
import re
class Cell(): #8
    def __init__(self, param):
        self.param = param
    def __add__(self, other):
        return self.param + other.param
    def __sub__(self, other):
        if self.param > other.param:
            return self.param - other.param
        else:
            return f'Разница между ячейками меньше или равна нулю'
    def __mul__(self, other):
        return self.param * other.param
    def __floordiv__(self, other):
        return self.param // other.param
    #@property
    def make_order(self, num):
        self.num = num
        stars = '*' * self.param# ***********************
        stars_re = re.findall(r'\S' * self.num, stars)
        remainder = len(stars) % len(stars_re[0])
        stars_remainder = '*' * remainder
        return '\n'.join(stars_re) + '\n' + stars_remainder





print(f'Сложение:')
cell_1 = Cell(8)
cell_2 = Cell(20)
print(cell_1 + cell_2)
print(f'Вычитание:')
cell_1 = Cell(20)
cell_2 = Cell(8)
print(cell_1 - cell_2)
print(f'Умножение:')
cell_1 = Cell(20)
cell_2 = Cell(8)
print(cell_1 * cell_2)
print(f'Деление:')
cell_1 = Cell(20)
cell_2 = Cell(8)
print(cell_1 // cell_2)
print(f'Метод make_order:')
cell_3 = Cell(48)
print(cell_3.make_order(5))



